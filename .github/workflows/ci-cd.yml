name: CI/CD Pipeline

on:
  push:
    branches: [main, stage, dev]
  pull_request:
    branches: [main, stage, dev]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality checks - run on all branches
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run security tests
        run: npm run test:security

      - name: Run Snyk dependency scan
        run: npm run test:snyk

      - name: Run performance tests (quick)
        run: npm run test:performance:quick

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "version=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "version=stage-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

  # Comprehensive testing - only on stage and main
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup Selenium WebDriver
        run: |
          # Install Chrome and ChromeDriver for Selenium tests
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          npm install -g chromedriver

      - name: Start application for testing
        run: |
          npm run start:web &
          sleep 15
          # Verify server is running
          curl -f http://localhost:3000/health || curl -f http://localhost:3001/health || exit 1

      - name: Run Comprehensive Security Scan
        run: npm run test:security:scan

      - name: Run Performance Tests (Standard)
        run: npm run test:performance:standard

      - name: Run Benchmark Tests
        run: npm run test:benchmark

      - name: Run Load Tests
        run: npm run test:load

      - name: Run Selenium Tests
        run: |
          npm run test:selenium
          npm run test:selenium:export
          npm run test:selenium:webapp

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports-${{ github.sha }}
          path: tests/performance/reports/

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: tests/security/reports/

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/

  # End-to-end tests - only on stage and main
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start application
        run: |
          npm run build
          npm run start &
          sleep 10

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ github.sha }}
          path: playwright-report/

  # Build and containerize
  build:
    name: Build & Containerize
    runs-on: ubuntu-latest
    needs: [quality, comprehensive-tests]
    if: github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ needs.quality.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Auto-merge dev -> stage
  auto-merge-to-stage:
    name: Auto-merge to Stage
    runs-on: ubuntu-latest
    needs: [quality]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create PR to stage
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there's already an open PR
          existing_pr=$(gh pr list --head dev --base stage --state open --json number --jq '.[0].number')
          
          if [ "$existing_pr" = "null" ] || [ -z "$existing_pr" ]; then
            # Create new PR
            pr_number=$(gh pr create \
              --title "üöÄ Auto-merge: dev ‚Üí stage" \
              --body "Automated PR created after successful dev build
              
              ## Changes
              - Latest development changes from dev branch
              - All quality checks passed ‚úÖ
              - Ready for staging deployment
              
              This PR will be auto-merged after stage tests pass." \
              --base stage \
              --head dev \
              --label "auto-merge" \
              --json number --jq '.number')
            
            echo "Created PR #$pr_number"
          else
            echo "PR #$existing_pr already exists, updating..."
          fi

  # Auto-merge stage -> main (only after manual approval)
  auto-merge-to-main:
    name: Auto-merge to Main
    runs-on: ubuntu-latest
    needs: [quality, comprehensive-tests, e2e, build]
    if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create PR to main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there's already an open PR
          existing_pr=$(gh pr list --head stage --base main --state open --json number --jq '.[0].number')
          
          if [ "$existing_pr" = "null" ] || [ -z "$existing_pr" ]; then
            # Create new PR
            pr_number=$(gh pr create \
              --title "üéâ Release: stage ‚Üí main" \
              --body "Production release candidate
              
              ## Release Information
              - Version: ${{ needs.quality.outputs.version }}
              - All tests passed ‚úÖ
              - E2E tests passed ‚úÖ
              - Docker image built and pushed ‚úÖ
              
              ## Deployment Checklist
              - [ ] Manual testing completed
              - [ ] Performance validated
              - [ ] Security review completed
              - [ ] Documentation updated
              
              **‚ö†Ô∏è This PR requires manual approval before merge**" \
              --base main \
              --head stage \
              --label "release" \
              --json number --jq '.number')
            
            echo "Created release PR #$pr_number"
          else
            echo "Release PR #$existing_pr already exists"
          fi

  # Deploy to environments
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    steps:
      - name: Deploy to dev environment
        run: |
          echo "üöÄ Deploying to development environment..."
          echo "Version: ${{ needs.quality.outputs.version }}"
          # Add actual deployment steps here

  deploy-stage:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, comprehensive-tests, e2e, build]
    if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Version: ${{ needs.quality.outputs.version }}"
          # Add actual deployment steps here

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, comprehensive-tests, e2e, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Version: ${{ needs.quality.outputs.version }}"
          # Add actual deployment steps here
