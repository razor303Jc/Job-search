name: Release Automation

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre-release:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Generate new version
        id: version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"
          
          case "${{ github.event.inputs.release-type }}" in
            "major")
              new_version=$(npm version major --no-git-tag-version)
              ;;
            "minor")
              new_version=$(npm version minor --no-git-tag-version)
              ;;
            "patch")
              new_version=$(npm version patch --no-git-tag-version)
              ;;
          esac
          
          new_version=${new_version#v}
          echo "New version: $new_version"
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          
      - name: Update package.json and create tag
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.new-version }}"
          git tag "v${{ steps.version.outputs.new-version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new-version }}"

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success' || github.ref_type == 'tag')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --run
        
      - name: Build application
        run: npm run build
        
      - name: Create distribution archive
        run: |
          tar -czf job-search-app-dist.tar.gz dist/
          tar -czf job-search-app-source.tar.gz \
            --exclude=node_modules \
            --exclude=dist \
            --exclude=.git \
            --exclude=coverage \
            --exclude='*.tar.gz' \
            .
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            job-search-app-dist.tar.gz
            job-search-app-source.tar.gz
          retention-days: 30

  docker-release:
    name: Build & Push Release Docker Image
    runs-on: ubuntu-latest
    needs: [build-release]
    if: always() && needs.build-release.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=${GITHUB_REF#refs/tags/v}
          elif [[ "${{ needs.prepare-release.outputs.new-version }}" != "" ]]; then
            version=${{ needs.prepare-release.outputs.new-version }}
          else
            version=$(node -p "require('./package.json').version")
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:v${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=Job Search Application
            org.opencontainers.image.description=Modern job search and career management platform
            org.opencontainers.image.version=v${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, docker-release]
    if: always() && needs.build-release.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          
      - name: Determine version
        id: release-info
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=${GITHUB_REF#refs/tags/v}
          else
            version=${{ needs.prepare-release.outputs.new-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.release-info.outputs.version }}
          name: Release v${{ steps.release-info.outputs.version }}
          body: |
            ## ðŸš€ Release v${{ steps.release-info.outputs.version }}
            
            ### What's New
            - Latest features and improvements
            - Bug fixes and performance enhancements
            - Updated dependencies and security patches
            
            ### ðŸ“Š Release Information
            - **Version**: v${{ steps.release-info.outputs.version }}
            - **Type**: ${{ github.event.inputs.release-type || 'automated' }} release
            - **Built from**: `main` branch
            - **Commit**: `${{ github.sha }}`
            
            ### ðŸš€ Deployment
            This release will be automatically deployed to production.
            
            ### ðŸ“¦ Assets
            - **Docker Image**: `ghcr.io/${{ github.repository }}:v${{ steps.release-info.outputs.version }}`
            - **Distribution**: Download the attached build artifacts
          files: |
            job-search-app-dist.tar.gz
            job-search-app-source.tar.gz
          prerelease: ${{ github.event.inputs.pre-release == 'true' }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Deployment notification
        run: |
          echo "ðŸŽ‰ Release created successfully!"
          echo "ðŸ“¦ Docker image available"
          echo "ðŸš€ Production deployment ready"
