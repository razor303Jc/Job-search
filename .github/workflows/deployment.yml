name: Deployment Automation

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      force-deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      image-tag: ${{ steps.env.outputs.image-tag }}
      can-deploy: ${{ steps.validation.outputs.can-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            environment="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            environment="production"
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            environment="staging"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            environment="development"
          else
            environment="development"
          fi
          
          echo "environment=$environment" >> $GITHUB_OUTPUT
          
          # Determine image tag
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            image_tag="${GITHUB_REF#refs/tags/}"
          else
            image_tag="${{ github.ref_name }}"
          fi
          
          echo "image-tag=$image_tag" >> $GITHUB_OUTPUT
          echo "Deploying to: $environment"
          echo "Image tag: $image_tag"
          
      - name: Validate deployment conditions
        id: validation
        run: |
          can_deploy="true"
          
          # Check if force deploy is enabled
          if [[ "${{ github.event.inputs.force-deploy }}" == "true" ]]; then
            echo "Force deploy enabled, skipping validation checks"
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Validate production deployment conditions
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            echo "Validating production deployment conditions..."
            
            # Only allow production deployments from main branch or tags
            if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref_type }}" != "tag" ]]; then
              echo "‚ùå Production deployments only allowed from main branch or tags"
              can_deploy="false"
            fi
            
            # Check if this is a manual workflow_dispatch for production
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "‚úÖ Manual production deployment approved"
            fi
          fi
          
          # Validate staging deployment conditions
          if [[ "${{ steps.env.outputs.environment }}" == "staging" ]]; then
            echo "Validating staging deployment conditions..."
            
            # Allow staging deployments from stage and main branches
            if [[ "${{ github.ref }}" != "refs/heads/stage" && "${{ github.ref }}" != "refs/heads/main" ]]; then
              echo "‚ö†Ô∏è Staging deployment from non-stage branch, proceeding with caution"
            fi
          fi
          
          echo "can-deploy=$can_deploy" >> $GITHUB_OUTPUT
          
          if [[ "$can_deploy" == "true" ]]; then
            echo "‚úÖ Deployment validation passed"
          else
            echo "‚ùå Deployment validation failed"
          fi

  health-check:
    name: Pre-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deployment-validation]
    if: needs.deployment-validation.outputs.can-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run health checks
        run: |
          echo "üè• Running pre-deployment health checks..."
          
          # Quick test run
          npm test -- --run --reporter=verbose
          
          # Build verification
          npm run build
          
          # Check build output
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "‚ùå Build output verification failed"
            exit 1
          fi
          
          echo "‚úÖ Health checks passed"

  deploy:
    name: Deploy to ${{ needs.deployment-validation.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [deployment-validation, health-check]
    if: needs.deployment-validation.outputs.can-deploy == 'true'
    environment: ${{ needs.deployment-validation.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Pull Docker image
        run: |
          echo "üì¶ Pulling Docker image for deployment..."
          image_tag="${{ needs.deployment-validation.outputs.image-tag }}"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$image_tag
          
      - name: Deploy to ${{ needs.deployment-validation.outputs.environment }}
        run: |
          environment="${{ needs.deployment-validation.outputs.environment }}"
          image_tag="${{ needs.deployment-validation.outputs.image-tag }}"
          
          echo "üöÄ Deploying to $environment environment..."
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$image_tag"
          
          case "$environment" in
            "development")
              echo "üîß Development deployment steps:"
              echo "  - Update development cluster"
              echo "  - Configure development environment variables"
              echo "  - Enable debug mode"
              echo "  - Set up development monitoring"
              ;;
            "staging")
              echo "üé≠ Staging deployment steps:"
              echo "  - Update staging cluster" 
              echo "  - Configure staging environment variables"
              echo "  - Enable staging monitoring"
              echo "  - Run smoke tests"
              ;;
            "production")
              echo "üè≠ Production deployment steps:"
              echo "  - Blue-green deployment strategy"
              echo "  - Update production cluster"
              echo "  - Configure production environment variables"
              echo "  - Enable production monitoring"
              echo "  - Health check validation"
              ;;
          esac
          
          # Simulate deployment (replace with actual deployment commands)
          sleep 5
          echo "‚úÖ Deployment to $environment completed successfully!"
          
      - name: Post-deployment verification
        run: |
          environment="${{ needs.deployment-validation.outputs.environment }}"
          
          echo "üîç Running post-deployment verification for $environment..."
          
          # Simulate health checks (replace with actual health check endpoints)
          echo "  ‚úÖ Application health check: OK"
          echo "  ‚úÖ Database connectivity: OK"
          echo "  ‚úÖ External services: OK"
          echo "  ‚úÖ Load balancer: OK"
          
          # Environment-specific checks
          case "$environment" in
            "production")
              echo "  ‚úÖ CDN cache warming: OK"
              echo "  ‚úÖ Monitoring alerts: Active"
              echo "  ‚úÖ Backup verification: OK"
              ;;
            "staging")
              echo "  ‚úÖ Test data initialization: OK"
              echo "  ‚úÖ Staging monitoring: Active"
              ;;
            "development")
              echo "  ‚úÖ Development tools: Active"
              echo "  ‚úÖ Debug endpoints: Available"
              ;;
          esac
          
          echo "‚úÖ Post-deployment verification completed"

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deployment-validation, deploy]
    if: needs.deployment-validation.outputs.can-deploy == 'true' && always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run smoke tests
        run: |
          environment="${{ needs.deployment-validation.outputs.environment }}"
          
          echo "üí® Running smoke tests for $environment environment..."
          
          # Run basic smoke tests
          echo "  üß™ Basic functionality tests"
          
          # Simulate smoke tests (replace with actual test commands)
          case "$environment" in
            "production")
              echo "  ‚úÖ User authentication flow: PASS"
              echo "  ‚úÖ Job search functionality: PASS"
              echo "  ‚úÖ Resume upload: PASS"
              echo "  ‚úÖ Database queries: PASS"
              echo "  ‚úÖ API endpoints: PASS"
              ;;
            "staging")
              echo "  ‚úÖ Core features: PASS"
              echo "  ‚úÖ API integration: PASS"
              echo "  ‚úÖ Test data access: PASS"
              ;;
            "development")
              echo "  ‚úÖ Development endpoints: PASS"
              echo "  ‚úÖ Debug features: PASS"
              ;;
          esac
          
          echo "‚úÖ Smoke tests completed successfully"

  rollback:
    name: Rollback (if needed)
    runs-on: ubuntu-latest
    needs: [deployment-validation, deploy, smoke-tests]
    if: failure() && needs.deployment-validation.outputs.can-deploy == 'true'
    environment: ${{ needs.deployment-validation.outputs.environment }}
    
    steps:
      - name: Rollback deployment
        run: |
          environment="${{ needs.deployment-validation.outputs.environment }}"
          
          echo "üîÑ Initiating rollback for $environment environment..."
          echo "‚ùå Deployment failed, rolling back to previous version"
          
          # Simulate rollback (replace with actual rollback commands)
          echo "  üîô Reverting to previous Docker image"
          echo "  üîô Restoring previous configuration"
          echo "  üîô Clearing failed deployment artifacts"
          
          sleep 3
          echo "‚úÖ Rollback completed successfully"

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deployment-validation, deploy, smoke-tests]
    if: always() && needs.deployment-validation.outputs.can-deploy == 'true'
    
    steps:
      - name: Send deployment notification
        run: |
          environment="${{ needs.deployment-validation.outputs.environment }}"
          image_tag="${{ needs.deployment-validation.outputs.image-tag }}"
          
          if [[ "${{ needs.smoke-tests.result }}" == "success" ]]; then
            status="‚úÖ SUCCESS"
            message="Deployment completed successfully!"
          else
            status="‚ùå FAILED"
            message="Deployment failed and may have been rolled back."
          fi
          
          echo "üì¢ Deployment Notification"
          echo "Environment: $environment"
          echo "Image Tag: $image_tag"
          echo "Status: $status"
          echo "Message: $message"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          
          # Here you could integrate with Slack, Teams, email, etc.
          echo "üìß Notification sent to stakeholders"
