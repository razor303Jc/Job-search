name: Deployment Automation

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      version:
        description: 'Version to deploy'
        required: true
        type: string
      dry-run:
        description: 'Perform dry run deployment'
        required: false
        default: false
        type: boolean
    secrets:
      DEPLOY_TOKEN:
        description: 'Deployment token'
        required: true

env:
  NODE_VERSION: '20'

jobs:
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      deployment-config: ${{ steps.config.outputs.deployment-config }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate environment
        run: |
          case "${{ inputs.environment }}" in
            "development"|"staging"|"production")
              echo "✅ Valid environment: ${{ inputs.environment }}"
              ;;
            *)
              echo "❌ Invalid environment: ${{ inputs.environment }}"
              echo "Valid environments: development, staging, production"
              exit 1
              ;;
          esac
          
      - name: Validate version format
        run: |
          if [[ "${{ inputs.version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "✅ Valid version format: ${{ inputs.version }}"
          else
            echo "❌ Invalid version format: ${{ inputs.version }}"
            echo "Expected format: x.y.z or vx.y.z (with optional pre-release suffix)"
            exit 1
          fi
          
      - name: Generate deployment config
        id: config
        run: |
          case "${{ inputs.environment }}" in
            "development")
              config='{"replicas":1,"resources":{"cpu":"100m","memory":"256Mi"},"hostname":"dev.job-search.app"}'
              ;;
            "staging")
              config='{"replicas":2,"resources":{"cpu":"200m","memory":"512Mi"},"hostname":"staging.job-search.app"}'
              ;;
            "production")
              config='{"replicas":3,"resources":{"cpu":"500m","memory":"1Gi"},"hostname":"job-search.app"}'
              ;;
          esac
          echo "deployment-config=$config" >> $GITHUB_OUTPUT

  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Health check endpoint test
        run: |
          echo "🔍 Testing health check endpoints..."
          npm run test:unit -- tests/unit/web/health.test.ts --run
          
      - name: Database migration check
        run: |
          echo "🔍 Validating database migrations..."
          # Add database migration validation here
          echo "✅ Database migrations validated"
          
      - name: Security scan
        run: |
          echo "🔍 Running security scan..."
          npm audit --audit-level high
          echo "✅ Security scan completed"
          
      - name: Performance baseline
        run: |
          echo "🔍 Checking performance baseline..."
          npm run test:unit -- tests/unit/performance/ --run
          echo "✅ Performance baseline validated"

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate-deployment, pre-deployment-checks]
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup deployment tools
        run: |
          echo "🔧 Setting up deployment tools..."
          # Add deployment tool setup here (kubectl, helm, etc.)
          echo "✅ Deployment tools ready"
          
      - name: Download Docker image
        run: |
          echo "📥 Pulling Docker image..."
          docker pull ghcr.io/${{ github.repository }}:${{ inputs.version }}
          echo "✅ Docker image ready"
          
      - name: Deploy application
        run: |
          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "🔍 DRY RUN: Would deploy version ${{ inputs.version }} to ${{ inputs.environment }}"
            echo "🔍 DRY RUN: Configuration: ${{ needs.validate-deployment.outputs.deployment-config }}"
            echo "🔍 DRY RUN: No actual deployment performed"
          else
            echo "🚀 Deploying version ${{ inputs.version }} to ${{ inputs.environment }}..."
            
            # Simulate deployment steps
            echo "📦 Applying configuration..."
            echo "🔄 Rolling out new version..."
            echo "⏳ Waiting for rollout to complete..."
            
            # Add actual deployment commands here
            sleep 5
            
            echo "✅ Deployment completed successfully"
          fi
          
      - name: Post-deployment verification
        if: inputs.dry-run == false
        run: |
          echo "🔍 Running post-deployment verification..."
          
          # Health check
          echo "📊 Health check..."
          # Add health check verification
          
          # Smoke tests
          echo "💨 Smoke tests..."
          # Add smoke test execution
          
          # Performance check
          echo "⚡ Performance check..."
          # Add performance verification
          
          echo "✅ All post-deployment checks passed"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && inputs.dry-run == false
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Automatic rollback
        run: |
          echo "🚨 Deployment failed, initiating rollback..."
          
          # Get previous successful deployment
          echo "🔍 Finding previous stable version..."
          
          # Perform rollback
          echo "⏪ Rolling back to previous version..."
          # Add rollback commands here
          
          echo "✅ Rollback completed"
          
      - name: Notify rollback
        run: |
          echo "📢 Deployment to ${{ inputs.environment }} was rolled back due to failures"
          echo "🔧 Please investigate the deployment issues before retrying"

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success() && inputs.dry-run == false
    
    steps:
      - name: Success notification
        run: |
          echo "🎉 Deployment to ${{ inputs.environment }} completed successfully!"
          echo "📦 Version: ${{ inputs.version }}"
          echo "🌐 Environment: ${{ inputs.environment }}"
          echo "⏰ Completed at: $(date -u)"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, rollback, notify-success]
    if: always()
    
    steps:
      - name: Cleanup deployment artifacts
        run: |
          echo "🧹 Cleaning up deployment artifacts..."
          # Add cleanup commands here
          echo "✅ Cleanup completed"
